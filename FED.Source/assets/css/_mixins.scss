/* ==========================================================================
   Mixins
   ========================================================================== */

// Convert px to em
// =====================================================================
$browser-context: $base-font-size; // Default

@function em($pixels, $context: $browser-context) {
	@return #{$pixels/$context}em
}

// Convert pixel values to rem values for whatever property is passed to it, e.g.:
// =====================================================================
/* Baseline, measured in pixels
 * The value should be the same as the font-size value for the html element
 * If the html element's font-size is set to 62.5% (of the browser's default font-size of 16px),
 * then the variable below would be 10px.
 */
$baseline-px: $base-font-size;

@mixin rem($property, $px-values) {
	// Convert the baseline into rems
	$baseline-rem: $baseline-px / 1rem;
	// Print the first line in pixel values
	#{$property}: $px-values;
	// If there is only one (numeric) value, return the property/value line for it.
	@if type-of($px-values) == 'number' {
		#{$property}: $px-values / $baseline-rem;
	} @else {
		// Create an empty list that we can dump values into
		$rem-values: unquote('');
		@each $value in $px-values {
			// If the value is zero, return 0
			@if $value == 0 {
				$rem-values: append($rem-values, $value);
			} @elseif $value == 'auto' {
				$rem-values: append($rem-values,' auto');
			} @else {
				$rem-values: append($rem-values, $value / $baseline-rem);
			}
	    }
		// Return the property and its list of converted values
		#{$property}: $rem-values;
    }
}

// Ellipsis
@mixin excerpt($font-size: $base-font-size, $line-height: ($base-line-height / $base-font-size), $lines-to-show: 2, $excerpt-bg: transparent) {
	background: $excerpt-bg;
	display: block; /* Fallback for non-webkit */
	display: -webkit-box;
	height: $font-size*$line-height*$lines-to-show; /* Fallback for non-webkit */
	max-height: $font-size*$line-height*$lines-to-show; /* Fallback for non-webkit */
	font-size: $font-size;
	line-height: $line-height;
	-webkit-line-clamp: $lines-to-show;
	-webkit-box-orient: vertical;
	overflow: hidden;
	text-overflow: ellipsis;
}

@mixin keyframes($animation-name) {
	@-webkit-keyframes #{$animation-name} {
		@content;
	}
	@-moz-keyframes #{$animation-name} {
		@content;
	}
	@-ms-keyframes #{$animation-name} {
		@content;
	}
	@-o-keyframes #{$animation-name} {
		@content;
	}
	@keyframes #{$animation-name} {
		@content;
	}
}

@mixin animation($str) {
	-webkit-animation: #{$str};
	-moz-animation: #{$str};
	-ms-animation: #{$str};
	-o-animation: #{$str};
	animation: #{$str};
}

@mixin background-gradient($start-color, $end-color, $orientation) {
	background: $start-color;

	@if $orientation == 'vertical' {
		background: -webkit-linear-gradient(top, $start-color, $end-color);
		background: linear-gradient(to bottom, $start-color, $end-color);
	} @else if $orientation == 'horizontal' {
		background: -webkit-linear-gradient(left, $start-color, $end-color);
		background: linear-gradient(to right, $start-color, $end-color);
	} @else {
		background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
		background: radial-gradient(ellipse at center, $start-color, $end-color);
	}
}

/// Horizontally centers block elements
/// @access public
/// @example scss - Usage
///   .foo {
///     @include center-block;
///   }
/// @example css - Result
///   .foo {
///     display: block;
///     margin-left: auto;
///     margin-right: auto;
///   }
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

/// Horizontally and vertically centers block elements
/// Important: you must have a parent element with `position: relative`.
/// @access public
/// @example scss - Usage
///   .foo {
///     @include center-both;
///   }
/// @example css - Result
///   .foo {
///     position: absolute;
///     top: 50%;
///     left: 50%;
///     -webkit-transform: translate(-50%, -50%);
///     -ms-transform: translate(-50%, -50%);
///     transform: translate(-50%, -50%);
///   }
@mixin center-both {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}


//http://www.sassmeister.com/gist/7f22e44ace49b5124eec
@mixin fluid-type($properties, $min-vw, $max-vw, $min-value, $max-value) {
  @each $property in $properties {
    #{$property}: $min-value;
  }

  @media screen and (min-width: $min-vw) {
    @each $property in $properties {
      #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)});
    }
  }

  @media screen and (min-width: $max-vw) {
    @each $property in $properties {
      #{$property}: $max-value;
    }
  }
}

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}
